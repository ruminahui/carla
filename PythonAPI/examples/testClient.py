#!/usr/bin/env python

# Copyright (c) 2019 Computer Vision Center (CVC) at the Universitat Autonoma de
# Barcelona (UAB).
#
# This work is licensed under the terms of the MIT license.
# For a copy, see <https://opensource.org/licenses/MIT>.

import glob
import os
import sys

# try:
#     sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
#         sys.version_info.major,
#         sys.version_info.minor,
#         'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
# except IndexError:
#     pass

import carla

import random
import time
import numpy as np
# Agent trained from imitation learning
import image_converter
from carla import ColorConverter as cc
from learning_agents.imitation.imitation_agent import ImitationAgent
from measurements import Measurements


REACH_GOAL = 0.0
GO_STRAIGHT = 5.0
TURN_RIGHT = 4.0
TURN_LEFT = 3.0
LANE_FOLLOW = 2.0


def pack_data(image, player, agent):
    """ Function to pack up the data into the necessary format for the agent to process """
    # print out the timestatmp of the image
    meas =  Measurements()
    meas.player_measurements.forward_speed = player.get_forward_speed() * 0.01 
    sensor_data = {}
    # Do some processing of the image dat
    # Store processed data to pass to agent
    sensor_data['CameraRGB'] = image_converter.to_rgb_array(image)

    # Process next control step from the agent and execute it
    control = agent.run_step(meas, sensor_data, LANE_FOLLOW, None)

    player.apply_control(control)




def world_setup(client, world):
    """ Initializes the appropiate setting for the Carla experiment"""

    # Set the weather parameter of the scene
    settings = world.get_settings()
    settings.fixed_delta_seconds = 0.1
    world.apply_settings(settings)
    world.set_weather(carla.WeatherParameters.ClearNoon)




def main():
    actor_list = []

    # In this tutorial script, we are going to add a vehicle to the simulation
    # and let it drive in autopilot. We will also create a camera attached to
    # that vehicle, and save all the images generated by the camera to disk.

    # try:
    # First of all, we need to create the client that will send the requests
    # to the simulator. Here we'll assume the simulator is accepting
    # requests in the localhost at port 2000.
    client = carla.Client('localhost', 2000)
    client.set_timeout(2.0)

    # Once we have a client we can retrieve the world that is currently
    # running.
    world = client.get_world()    

    print(client.show_recorder_file_info('/home/jimy/Desktop/recording01.log', True))
    client.replay_file('/home/jimy/Desktop/recording01.log', 20, 37, 265)

    #     # Get a spectator
    #     spectator = world.get_spectator()

    #     # The world contains the list blueprints that we can use for adding new
    #     # actors into the simulation.
    #     blueprint_library = world.get_blueprint_library()

    #     # Find the car actor in the world
    #     car_actor = None
    #     for actor in world.get_actors():
    #         if("vehicle" in actor.type_id):
    #             car_actor = actor
    #             break
    #     if(car_actor == None):
    #         raise NoActorError("No actor found")


    #     # Initiate an agent to control the car
    #     agent = ImitationAgent('Town01', True, car_actor)

    #     ## Attach a camera to the vehicle and feed in sensory values to the controller of the car
    #     camera_bp = blueprint_library.find('sensor.camera.rgb')
    #     camera_bp.set_attribute('image_size_x', '800')
    #     camera_bp.set_attribute('image_size_y', '600')
    #     camera_bp.set_attribute('fov', '100')
    #     camera_bp.set_attribute('sensor_tick', '0.1')


    #     Attachment = carla.AttachmentType
    #     camera_transform = carla.Transform(carla.Location(x=2, z=1.4), carla.Rotation(pitch=-15.0))
    #     camera = world.spawn_actor(camera_bp, camera_transform, attach_to=car_actor, attachment_type=Attachment.Rigid)
    #     actor_list.append(camera)
    #     camera.listen(lambda data: pack_data(data, car_actor, agent))
    #     print('created %s' % camera.type_id)

    #     while(True):
    #         time.sleep(10)
    # finally:

    #     print('destroying actors')
    #     for actor in actor_list:
    #         actor.destroy()
    #     print('done.')


if __name__ == '__main__':

    main()
